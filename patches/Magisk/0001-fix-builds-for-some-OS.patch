From 6569d2187217e0a04ab43a0b65bf4743caead83e Mon Sep 17 00:00:00 2001
From: affggh <879632264@qq.com>
Date: Sun, 13 Jul 2025 21:16:31 +0800
Subject: [PATCH 1/8] fix builds for some OS

---
 native/src/base/files.rs    |  2 +-
 native/src/boot/bootimg.cpp | 17 +++++++++++++++++
 native/src/boot/cpio.rs     |  2 +-
 3 files changed, 19 insertions(+), 2 deletions(-)

diff --git a/native/src/base/files.rs b/native/src/base/files.rs
index 6c8b721b3..9704ad9d8 100644
--- a/native/src/base/files.rs
+++ b/native/src/base/files.rs
@@ -152,7 +152,7 @@ impl FileAttr {
     #[inline(always)]
     #[allow(clippy::unnecessary_cast)]
     fn is(&self, mode: mode_t) -> bool {
-        (self.st.st_mode & libc::S_IFMT as c_uint) as mode_t == mode
+        ((self.st.st_mode as mode_t) & libc::S_IFMT) == mode
     }
 
     pub fn is_dir(&self) -> bool {
diff --git a/native/src/boot/bootimg.cpp b/native/src/boot/bootimg.cpp
index 61ad88107..e2000bc90 100644
--- a/native/src/boot/bootimg.cpp
+++ b/native/src/boot/bootimg.cpp
@@ -11,6 +11,23 @@
 
 using namespace std;
 
+// refs: https://github.com/AcademySoftwareFoundation/Imath/pull/350
+//       https://stackoverflow.com/questions/67521312/safe-equivalent-of-stdbit-cast-in-c11
+#if !defined(__cpp_lib_bit_cast) || __cpp_lib_bit_cast < 201806L
+template <class T2, class T1>
+constexpr T2 cpp11_bit_cast(T1 t1) {
+  static_assert(sizeof(T1)==sizeof(T2), "Types must match sizes");
+  static_assert(std::is_pod<T1>::value, "Requires POD input");
+  static_assert(std::is_pod<T2>::value, "Requires POD output");
+
+  T2 t2;
+  std::memcpy( std::addressof(t2), std::addressof(t1), sizeof(T1) );
+  return t2;
+}
+
+#define bit_cast cpp11_bit_cast
+#endif
+
 #define PADDING 15
 #define SHA256_DIGEST_SIZE 32
 #define SHA_DIGEST_SIZE 20
diff --git a/native/src/boot/cpio.rs b/native/src/boot/cpio.rs
index bfca2701a..584acb08a 100644
--- a/native/src/boot/cpio.rs
+++ b/native/src/boot/cpio.rs
@@ -366,7 +366,7 @@ impl Cpio {
                 out.create_symlink_to(&buf)?;
             }
             S_IFBLK | S_IFCHR => {
-                let dev = makedev(entry.rdevmajor.try_into()?, entry.rdevminor.try_into()?);
+                let dev = unsafe { makedev(entry.rdevmajor.try_into()?, entry.rdevminor.try_into()?) };
                 unsafe { mknod(out.as_ptr().cast(), entry.mode, dev) };
             }
             _ => {
-- 
2.43.0

