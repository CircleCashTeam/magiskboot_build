From 9cce40b474cc8ba1c3d8ca647a30d390dbd66eb6 Mon Sep 17 00:00:00 2001
From: affggh <879632264@qq.com>
Date: Sun, 13 Jul 2025 21:26:47 +0800
Subject: [PATCH 4/8] base rust add fd_path impl for other OS

---
 native/src/base/Cargo.toml |  3 +++
 native/src/base/files.rs   | 46 ++++++++++++++++++++++++++++++++++++++
 2 files changed, 49 insertions(+)

diff --git a/native/src/base/Cargo.toml b/native/src/base/Cargo.toml
index 5a1c843d5..8c40d4fa5 100644
--- a/native/src/base/Cargo.toml
+++ b/native/src/base/Cargo.toml
@@ -23,3 +23,6 @@ bytemuck = { workspace = true }
 num-traits = { workspace = true }
 num-derive = { workspace = true }
 const_format = { workspace = true }
+
+[target.'cfg(target_os = "windows")'.dependencies]
+filepath = "0.1.2"
diff --git a/native/src/base/files.rs b/native/src/base/files.rs
index d14c4bb9b..339d9edfb 100644
--- a/native/src/base/files.rs
+++ b/native/src/base/files.rs
@@ -127,6 +127,8 @@ fn open_fd(path: &Utf8CStr, flags: i32, mode: mode_t) -> OsResult<OwnedFd> {
     }
 }
 
+#[cfg(any(target_os = "android", target_os = "linux",
+          target_os = "cygwin", target_os = "emscripten"))]
 pub fn fd_path(fd: RawFd, buf: &mut dyn Utf8CStrBuf) -> OsResult<'static, ()> {
     let path = cstr::buf::new::<64>()
         .join_path("/proc/self/fd")
@@ -134,6 +136,50 @@ pub fn fd_path(fd: RawFd, buf: &mut dyn Utf8CStrBuf) -> OsResult<'static, ()> {
     path.read_link(buf).map_err(|e| e.set_args(None, None))
 }
 
+#[cfg(target_vendor = "apple")]
+pub fn fd_path(fd: RawFd, utf8_buf: &mut dyn Utf8CStrBuf) -> io::Result<()> {
+    unsafe {
+        let buf = utf8_buf.as_str_mut().as_bytes_mut();
+        let mut path_buf: [u8; libc::PATH_MAX as usize] = [0; libc::PATH_MAX as usize];
+        let ret: isize = libc::fcntl(fd, libc::F_GETPATH, path_buf.as_mut_ptr()) as isize;
+        if ret < 0 {
+            return Err(io::Error::last_os_error())
+        }
+        let len = path_buf.iter().position(|&x| x == 0).unwrap();
+        let copy_len: usize = len.min(buf.len().saturating_sub(1));
+        buf[..copy_len].copy_from_slice(&path_buf[..copy_len]);
+        buf.get_mut(copy_len).map(|b| *b = 0);
+        Ok(())
+    }
+}
+
+#[cfg(target_os = "windows")]
+use filepath::FilePath;
+
+#[cfg(target_os = "windows")]
+pub fn fd_path(fd: RawFd, utf8_buf: &mut dyn Utf8CStrBuf) -> io::Result<()> {
+    unsafe {
+        let buf = utf8_buf.as_str_mut().as_bytes_mut();
+        let file = File::from_raw_fd(fd);
+        let path = match file.path() {
+           Ok(p) => p,
+           Err(_) => {
+               return Err(io::Error::last_os_error())
+           }
+       };
+       let path_str = match path.to_str() {
+           Some(s) => s.as_bytes(),
+           None => {
+               return Err(io::Error::last_os_error())
+           }
+       };
+       let bytes_to_copy = path_str.len().min(buf.len().saturating_sub(1));
+       buf[..bytes_to_copy].copy_from_slice(&path_str[..bytes_to_copy]);
+       buf.get_mut(bytes_to_copy).map(|b| *b = 0);
+       Ok(())
+   }
+}
+
 pub struct FileAttr {
     pub st: libc::stat,
     #[cfg(feature = "selinux")]
-- 
2.43.0

